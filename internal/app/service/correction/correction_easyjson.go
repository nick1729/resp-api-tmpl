// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package correction

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Service) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Service) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Service) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Service) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection(l, v)
}
func easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection1(in *jlexer.Lexer, out *GetResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "payload":
			out.Payload = string(in.String())
		case "is_error":
			out.IsError = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection1(out *jwriter.Writer, in GetResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"is_error\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsError))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection1(l, v)
}
func easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection2(in *jlexer.Lexer, out *GetReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection2(out *jwriter.Writer, in GetReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3eefa4e8EncodeGithubComNick1729RespApiTmplInternalAppServiceCorrection2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3eefa4e8DecodeGithubComNick1729RespApiTmplInternalAppServiceCorrection2(l, v)
}
